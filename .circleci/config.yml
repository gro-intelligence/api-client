---

version: 2.1

jobs:
  build: &build-job
    # ref: https://circleci.com/docs/2.0/executor-types/?section=executors-and-images#using-docker
    docker:
      # Use the base circle CI image
      - image: "cimg/python:3.7"
    steps:
      # TODO set up source and pip caching
      # Add deploy key
      - add_ssh_keys: &ssh-keys
          fingerprints:
            - "d3:c1:80:e6:6f:b2:f8:46:a6:8c:cf:74:71:a3:39:19"

      # checkout the git repo
      - checkout: &checkout-code
          path: "."

      - run: &setup-environment
          name: "Environment setup"
          command: |
            pip install -U pip wheel
            pip install poetry==1.2.2
            poetry install

      - run: &run-doctests
          name: "Run doctests"
          command: poetry run python groclient/lib.py -v

      - run: &tests-code-coverage
          name: "Run tests and code coverage"
          command: >-
            mkdir -p circleci/testresults circleci/codecoverage &&
            poetry run pytest
            --junitxml=circleci/testresults/junit.xml
            --cov=groclient
            --cov-report=html:circleci/codecoverage/coverage_html

      - store_test_results: &store-test-results
          path: circleci/testresults

      - store_artifacts: &store-coverage-report
          path: circleci/codecoverage/coverage_html

      - run: &test-sample-notebook
          name: "Test sample notebook"
          command: >-
            poetry run pip install -r api/client/samples/analogous_years/requirements.txt &&
            poetry run pytest api/client/samples/analogous_years/

      # We'll skip conditionally checking for success at this point since by default
      # CircleCI will run the following steps on_success
      # https://circleci.com/docs/2.0/configuration-reference/#run
      - run: &build-docs
          name: "Ensure latest docs build without warnings or errors"
          command: >-
            poetry install -E docs &&
            poetry run sphinx-build -W --keep-going docs docs/_build/html

      - run: &test-docs
          name: "Check for broken links in the docs"
          command: |
            poetry run sphinx-build -b linkcheck docs docs/_build/linkcheck

      # Build docs and push to gh-pages.
      # Note: git remote set-url is for setting a git url instead of an https
      # one, which is needed so Shippable can be authenticated to push changes.
      - run: &publish-docs
          name: "Build docs and push to gh-pages"
          command: >-
            git config --global user.email "api-documentation@gro-intelligence.com" &&
            git config --global user.name "Gro Intelligence" &&
            git remote set-url origin git@github.com:$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git &&
            poetry run bin/sphinx_push_ghpages.sh

      # Note: We need to install versioning library outside of the poetry venv.
      # See note in CONTRIBUTING.md.
      - run: &build-package
          name: "Build package"
          command: >-
            pip install poetry-dynamic-versioning &&
            poetry build

    environment:
      GROAPI_TOKEN: dummytoken

  merge-build:
    <<: *build-job
    steps:
      - add_ssh_keys:
          <<: *ssh-keys
      - checkout:
          <<: *checkout-code
      - run:
          <<: *setup-environment
      - run:
          <<: *run-doctests
      - store_test_results:
          <<: *store-test-results
      - store_artifacts:
          <<: *store-coverage-report
      - run:
          <<: *test-sample-notebook
      - run:
          <<: *build-docs
      - run:
          <<: *test-docs
      - run:
          <<: *publish-docs
      - run:
          <<: *build-package
      # Publish new development updates to TestPyPI whenever changes are merged
      # to development.
      # We only want to publish a new package when PRs are actually accepted and
      # merged.
      - run:
          name: "Push to testpypi"
          command: >-
              poetry config repositories.testpypi https://test.pypi.org/legacy/ &&
              poetry publish -u __token__ -p $TESTPYPI_TOKEN -r testpypi


  release-build:
    <<: *build-job
    steps:
      - add_ssh_keys:
          <<: *ssh-keys
      - checkout:
          <<: *checkout-code
      - run:
          <<: *setup-environment
      - run:
          <<: *run-doctests
      - store_test_results:
          <<: *store-test-results
      - store_artifacts:
          <<: *store-coverage-report
      - run:
          <<: *test-sample-notebook
      - run:
          <<: *build-docs
      - run:
          <<: *test-docs
      - run:
          <<: *publish-docs
      - run:
          <<: *build-package
      # Publish new releases to PyPI.
      # We only check whether this is a tagged build and if so, publish to pypi.
      - run:
          name: "Push to pypi"
          command: >-
              poetry publish -u __token__ -p $PYPI_TOKEN

workflows:
  pull-request:
    jobs:
      - build:
          filters:
            branches:
              ignore: "/^development$/"


  merge-commit:
    jobs:
      - merge-build:
          filters:
            branches:
              only: "/^development$/"

  release:
    jobs:
      - release-build:
          filters:
            branches:
              ignore: "/.*/"
            tags:
              only: "/^v.*/"
